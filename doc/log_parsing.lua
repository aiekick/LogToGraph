--LogInfo(infos_string) 					-- will log the message in the in app console --LogWarning(warning_string) 				-- will log the message in the in app console --LogError(error_string) 					-- will log the message in the in app console --SetScriptDescription(description_string)	-- will set the description of your script in app--SetRowBufferName("buffer_row");			-- set the lua string varaible name who will be filled with the content of the row file--SetFunctionForEachRow("eachRow");			-- set the function name who will be called at each row of the file--SetFunctionForEndFile("endFile");			-- set the function name who will be called at the end of the file--GetRowIndex()								-- return the row number of the file--GetRowCount()								-- return the number of rows of the file--Init() 									-- is the entry point of the script. this function is needed--will add a signal numerical value --AddSignalValue(signal_category, signal_name, signal_epoch_time, signal_value)function Init()  	SetInfos("sample script")	SetRowBufferName("buffer_line");	SetFunctionForEachRow("eachRow");	SetFunctionForEndFile("endFile");		LogInfo(" --- Start of file parsing ---");endfunction eachRow()	-- analog signal	_level, _time, _name, _value = string.match(buffer_line, "<profiler level=\"(.*)\" time=\"(.*)\" name=\"(.*)\" render=\"(.*)\">")	if _level ~= nil and _time ~= nil and _name ~= nil and _value ~= nil then		AddSignalValue("depth_"..tostring(_level), _name, _time, _value)	endendfunction endFile()	LogInfo(" --- End of file parsing ---");end